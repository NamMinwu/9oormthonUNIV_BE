services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring_boot_app
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - JWT_HEADER=${JWT_HEADER}
      - JWT_EXPIRATION_TIME=${JWT_EXPIRATION_TIME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_TOKEN_ACCESS_EXPIRATION=${JWT_TOKEN_ACCESS_EXPIRATION}
      - JWT_TOKEN_REFRESH_EXPIRATION=${JWT_TOKEN_REFRESH_EXPIRATION}
      - CLOUD_AWS_CREDENTIALS_ACCESS_KEY=${CLOUD_AWS_CREDENTIALS_ACCESS_KEY}
      - CLOUD_AWS_CREDENTIALS_SECRET_KEY=${CLOUD_AWS_CREDENTIALS_SECRET_KEY}
      - CLOUD_AWS_REGION_STATIC=${CLOUD_AWS_REGION_STATIC}
      - CLOUD_S3_BUCKET=${CLOUD_S3_BUCKET}
    ports:
      - "8080:8080"
    restart:
      always
    depends_on:
      - mysql-db
    networks:
      - my_networks
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "22181:2181"
    networks:
      - my_networks

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my_networks

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui_9oormthonuniv_be
    ports:
      - "8088:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - my_networks



  mysql-db:
    image: mysql:8.0  # Use MySQL version 8
    container_name: mysql-db
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"  # Exposes MySQL port
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h mysql-db -uroot -p${MYSQL_ROOT_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my_networks



  # Optional: If you want to use AWS S3 locally for testing, you can add a mock S3 service like LocalStack
#  s3:
#    image: localstack/localstack
#    container_name: localstack
#    environment:
#      - SERVICES=s3
#      - DEFAULT_REGION=ap-northeast-2
#    ports:
#      - "4566:4566"  # LocalStack exposes this port for services like S3
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
networks:
  my_networks:
    driver: bridge

volumes:
  mysql-data:
  kafka_data: